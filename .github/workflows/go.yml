# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  APP_DB_HOST: localhost
  APP_DB_PORT: 5432
  APP_DB_USERNAME: postgres
  APP_DB_PASSWORD: 123456789
  APP_DB_NAME: postgres

jobs:

  build:
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: 123456789
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...


    - name: Log in to Docker Hub
      run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USER }}" --password-stdin

    - name: Get short SHA
      id: vars
      run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build -f Dockerfile -t danielriffi/cdas-ex:latest ./
        docker tag danielriffi/cdas-ex:latest danielriffi/cdas-ex:${{ env.GIT_SHA }}

    - name: Run Trivy vulnerability scanner in image mode
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: "docker.io/danielriffi/cdas-ex:${{ env.GIT_SHA }}"
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL'

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL'

    - name: Run Trivy vulnerability scanner in IaC mode
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'config'
        ignore-unfixed: true
        ignore-policy: 'aws.ec2.specify_ami_owners'
        format: 'sarif'
        output: 'trivy-iac-results.sarif'
        exit-code: '1'
        severity: 'CRITICAL'

    - name: Push Docker image
      run: |
        docker push danielriffi/cdas-ex:latest
        docker push danielriffi/cdas-ex:${{ env.GIT_SHA }}


    - name: Upload Trivy FS scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-fs-results.sarif

    - name: Upload Trivy IaC scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-iac-results.sarif

  sonarqube:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.1.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
